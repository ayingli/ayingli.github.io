(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{350:function(a,t,s){"use strict";s.r(t);var n=s(6),e=Object(n.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"如何用python的pandas库函数修改缺失的列值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何用python的pandas库函数修改缺失的列值"}},[a._v("#")]),a._v(" 如何用Python的pandas库函数修改缺失的列值")]),a._v(" "),t("h2",{attrs:{id:"题目"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#题目"}},[a._v("#")]),a._v(" 题目")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("DataFrame products\n+-------------+--------+\n| Column Name | Type   |\n+-------------+--------+\n| name        | object |\n| quantity    | int    |\n| price       | int    |\n+-------------+--------+\n")])])]),t("p",[a._v("编写一个解决方案，在 "),t("code",[a._v("quantity")]),a._v(" 列中将缺失的值填充为 "),t("code",[a._v("**0**")]),a._v("。")]),a._v(" "),t("p",[a._v("返回结果如下示例所示。")]),a._v(" "),t("p",[t("strong",[a._v("示例 1：")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("输入：\n+-----------------+----------+-------+\n| name            | quantity | price |\n+-----------------+----------+-------+\n| Wristwatch      | 32       | 135   |\n| WirelessEarbuds | None     | 821   |\n| GolfClubs       | None     | 9319  |\n| Printer         | 849      | 3051  |\n+-----------------+----------+-------+\n输出：\n+-----------------+----------+-------+\n| name            | quantity | price |\n+-----------------+----------+-------+\n| Wristwatch      | 32       | 135   |\n| WirelessEarbuds | 0        | 821   |\n| GolfClubs       | 0        | 9319  |\n| Printer         | 849      | 3051  |\n+-----------------+----------+-------+\n解释：\nToaster 和 Headphones 的数量被填充为 0。\n")])])]),t("h2",{attrs:{id:"解题方案"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#解题方案"}},[a._v("#")]),a._v(" 解题方案")]),a._v(" "),t("h3",{attrs:{id:"_1、审题-理解题意"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、审题-理解题意"}},[a._v("#")]),a._v(" 1、审题，理解题意")]),a._v(" "),t("p",[a._v("题目意思是有一个名为 products 的 DataFrame，它包含产品数据。然而，一些“数量”数据丢失了。要求用值 0 填充缺失的数量数据。此时我们可以用fillna 函数中的指定方法来替换 None(或通常的 DataFrame 表示形式中的 NaN)值。")]),a._v(" "),t("h4",{attrs:{id:"fillna-函数参数定义"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#fillna-函数参数定义"}},[a._v("#")]),a._v(" fillna 函数参数定义：")]),a._v(" "),t("p",[a._v("我们重点介绍fillna 函数中最常用的参数：")]),a._v(" "),t("ul",[t("li",[a._v("value: 标量，字典，Series 或 DataFrame。用于填充空洞的值(例如 0)。这就是我们在解决方案中使用的。")]),a._v(" "),t("li",[a._v("method: {‘backfill’, ‘bfill’, ‘pad’, ‘ffill’, None}。用于填充重新索引 Series 中的空洞的方法。默认为 None。")]),a._v(" "),t("li",[a._v("axis: {0 or ‘index’, 1 or ‘columns’}。沿其填充缺失值的轴。")]),a._v(" "),t("li",[a._v("inplace: 布尔值。如果为True，则原地填充。注意：这将修改此对象上的任何其他视图。默认值为 False。")])]),a._v(" "),t("h3",{attrs:{id:"_2、解题思路"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、解题思路"}},[a._v("#")]),a._v(" 2、解题思路")]),a._v(" "),t("p",[a._v("对于本题目，我们使用：")]),a._v(" "),t("div",{staticClass:"language-python extra-class"},[t("pre",{pre:!0,attrs:{class:"language-python"}},[t("code",[a._v("products"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'quantity'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("fillna"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" inplace"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("True")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),t("ul",[t("li",[t("p",[a._v("由于我们正在尝试填充 products DataFrame 的 quantity 列中缺失的数据，因此我们将 fillna 函数应用于 products['quantity']。")])]),a._v(" "),t("li",[t("p",[a._v("由于我们希望将缺少的值(NaN 或 None)替换为 0，因此使用 0 作为 value 参数。")])]),a._v(" "),t("li",[t("p",[a._v("最后，我们想返回原始的 DataFrame，所以我们设置了 inplace=True 来直接修改原始的 DataFrame，而不返回新的 DataFrame。")]),a._v(" "),t("p",[a._v("请注意，如果不使用 inplace=True，则必须像这样捕获结果：products = products['quantity'].fillna(0)")])])]),a._v(" "),t("h3",{attrs:{id:"_3、代码实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3、代码实现"}},[a._v("#")]),a._v(" 3、代码实现")]),a._v(" "),t("div",{staticClass:"language-python extra-class"},[t("pre",{pre:!0,attrs:{class:"language-python"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("import")]),a._v(" pandas "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("as")]),a._v(" pd\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("def")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("fillMissingValues")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("products"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" pd"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("DataFrame"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" pd"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("DataFrame"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n    products"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'quantity'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("fillna"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" inplace"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("True")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" products\n")])])]),t("h3",{attrs:{id:"_4、执行结果"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4、执行结果"}},[a._v("#")]),a._v(" 4、执行结果")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/yishukan/yishukan/raw/master/img/image-20231025105642669.png",alt:"image-20231025105642669"}})])])}),[],!1,null,null,null);t.default=e.exports}}]);