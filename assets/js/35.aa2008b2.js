(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{343:function(a,t,s){"use strict";s.r(t);var n=s(6),e=Object(n.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"如何用python的pandas库函数将相同结构的两张表连接为一张表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何用python的pandas库函数将相同结构的两张表连接为一张表"}},[a._v("#")]),a._v(" 如何用Python的pandas库函数将相同结构的两张表连接为一张表")]),a._v(" "),t("h3",{attrs:{id:"题目"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#题目"}},[a._v("#")]),a._v(" 题目")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("DataFrame df1\n+-------------+--------+\n| Column Name | Type   |\n+-------------+--------+\n| student_id  | int    |\n| name        | object |\n| age         | int    |\n+-------------+--------+\n\nDataFrame df2\n+-------------+--------+\n| Column Name | Type   |\n+-------------+--------+\n| student_id  | int    |\n| name        | object |\n| age         | int    |\n+-------------+--------+\n")])])]),t("p",[a._v("编写一个解决方案，将两个 DataFrames "),t("strong",[a._v("垂直")]),a._v(" 连接成一个 DataFrame。")]),a._v(" "),t("p",[a._v("结果格式如下示例所示。")]),a._v(" "),t("p",[t("strong",[a._v("示例 1：")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("输入：\ndf1\n+------------+---------+-----+\n| student_id | name    | age |\n+------------+---------+-----+\n| 1          | Mason   | 8   |\n| 2          | Ava     | 6   |\n| 3          | Taylor  | 15  |\n| 4          | Georgia | 17  |\n+------------+---------+-----+\ndf2\n+------------+------+-----+\n| student_id | name | age |\n+------------+------+-----+\n| 5          | Leo  | 7   |\n| 6          | Alex | 7   |\n+------------+------+-----+\n输出：\n+------------+---------+-----+\n| student_id | name    | age |\n+------------+---------+-----+\n| 1          | Mason   | 8   |\n| 2          | Ava     | 6   |\n| 3          | Taylor  | 15  |\n| 4          | Georgia | 17  |\n| 5          | Leo     | 7   |\n| 6          | Alex    | 7   |\n+------------+---------+-----+\n解释：\n两个 DataFrame 被垂直堆叠，它们的行被合并。\n")])])]),t("h3",{attrs:{id:"解题方案"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#解题方案"}},[a._v("#")]),a._v(" 解题方案")]),a._v(" "),t("h3",{attrs:{id:"_1、审题-理解题意"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、审题-理解题意"}},[a._v("#")]),a._v(" 1、审题，理解题意")]),a._v(" "),t("p",[a._v("题目的意思是有两个DataFrame，且有相同的列结构 student_id，name 和 age。想要垂直地连接两个 DataFrame，df1 和 df2。可以使用pandas 内部的一个方便的函数pd.concat()垂直(按行)或水平(按列)连接 DataFrame。")]),a._v(" "),t("h5",{attrs:{id:"pd-concat-函数参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#pd-concat-函数参数"}},[a._v("#")]),a._v(" pd.concat()函数参数")]),a._v(" "),t("ul",[t("li",[a._v("objs 参数是一个要串联的 Series 或 DataFrame 对象的序列或映射。")]),a._v(" "),t("li",[a._v("axis 参数决定连接的方向：\naxis=0 设置为缺省值，这意味着它将垂直(按行)连接 DataFrame。\naxis=1 将水平连接 DataFrame(按列)。")])]),a._v(" "),t("h3",{attrs:{id:"_2、解题思路"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、解题思路"}},[a._v("#")]),a._v(" 2、解题思路")]),a._v(" "),t("p",[a._v("对于该题目我们用pd.concat()函数垂直连接 DataFrame，需要确保列的顺序一致。")]),a._v(" "),t("div",{staticClass:"language-python extra-class"},[t("pre",{pre:!0,attrs:{class:"language-python"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" pd"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("concat"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("df1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" df2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" axis"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),t("ul",[t("li",[a._v("我们利用 pd.concat() 函数来连接 DataFrames。因为我们连接了 df1 和 df2，所以我们传递列表 [df1，df2] 作为 objs 的第一个参数；")]),a._v(" "),t("li",[a._v("由于我们垂直连接，所以我们设置 axis=0。")])]),a._v(" "),t("h3",{attrs:{id:"_3、代码实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3、代码实现"}},[a._v("#")]),a._v(" 3、代码实现")]),a._v(" "),t("div",{staticClass:"language-python extra-class"},[t("pre",{pre:!0,attrs:{class:"language-python"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("import")]),a._v(" pandas "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("as")]),a._v(" pd\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("def")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("concatenateTables")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("df1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" pd"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("DataFrame"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" df2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" pd"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("DataFrame"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" pd"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("DataFrame"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" pd"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("concat"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("df1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" df2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" axis"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\n")])])]),t("h3",{attrs:{id:"_4、执行结果"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4、执行结果"}},[a._v("#")]),a._v(" 4、执行结果")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/yishukan/yishukan/raw/master/img/image-20231025111256972.png",alt:"image-20231025111256972"}})])])}),[],!1,null,null,null);t.default=e.exports}}]);