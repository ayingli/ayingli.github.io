(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{345:function(a,t,s){"use strict";s.r(t);var n=s(6),e=Object(n.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"如何用python的pandas库从表中创建-dataframe"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何用python的pandas库从表中创建-dataframe"}},[a._v("#")]),a._v(" 如何用Python的pandas库从表中创建 DataFrame")]),a._v(" "),t("h3",{attrs:{id:"题目"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#题目"}},[a._v("#")]),a._v(" 题目")]),a._v(" "),t("p",[a._v("编写一个解决方案，基于名为 "),t("code",[a._v("student_data")]),a._v(" 的二维列表 "),t("strong",[a._v("创建")]),a._v(" 一个 DataFrame 。这个二维列表包含一些学生的 ID 和年龄信息。DataFrame 应该有两列， "),t("code",[a._v("student_id")]),a._v(" 和 "),t("code",[a._v("age")]),a._v("，并且与原始二维列表的顺序相同。返回结果格式如下示例所示。")]),a._v(" "),t("p",[t("strong",[a._v("示例 1：")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("输入：\nstudent_data:\n[\n  [1, 15],\n  [2, 11],\n  [3, 11],\n  [4, 20]\n]\n输出：\n+------------+-----+\n| student_id | age |\n+------------+-----+\n| 1          | 15  |\n| 2          | 11  |\n| 3          | 11  |\n| 4          | 20  |\n+------------+-----+\n解释：\n基于 student_data 创建了一个 DataFrame，包含 student_id 和 age 两列。\n")])])]),t("h3",{attrs:{id:"解决方案"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#解决方案"}},[a._v("#")]),a._v(" 解决方案")]),a._v(" "),t("h3",{attrs:{id:"_1、审题-理解题意"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、审题-理解题意"}},[a._v("#")]),a._v(" 1、审题，理解题意")]),a._v(" "),t("p",[a._v("2D 列表： 列表的列表，其中每个内部列表表示一行数据。题目中的student_data就是一个二维列表，是列表中又包含着列表，其中被包含的每一个列表都代表一个单独的记录，例如 【1，15】就代表一个学生的ID是1，年龄是15。")]),a._v(" "),t("p",[a._v("DataFrame： 是 pandas 库提供的一种强大而方便的二维标记数据结构。它是一个类似于 2D 表格的结构，类似于电子表格或 SQL 表格。每一行代表一个单独的记录，每一列代表一个不同的属性。")]),a._v(" "),t("p",[a._v("题目中的意思是想让我们将 2D 列表转换为 pandas DataFrame。")]),a._v(" "),t("h3",{attrs:{id:"_2、解题思路"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、解题思路"}},[a._v("#")]),a._v(" 2、解题思路")]),a._v(" "),t("h4",{attrs:{id:"导入-pandas"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#导入-pandas"}},[a._v("#")]),a._v(" 导入 pandas:")]),a._v(" "),t("p",[a._v("import pandas as pd        #该行导入 pandas 库并为其提供别名 pd。")]),a._v(" "),t("h4",{attrs:{id:"定义函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#定义函数"}},[a._v("#")]),a._v(" 定义函数：")]),a._v(" "),t("p",[a._v("def createDataframe(student_data: List[List[int]]) -> pd.DataFrame:   #该行定义了一个名为 createDataframe 的函数，该函数接受 DataFrame student_data 作为参数并返回 DataFrame。")]),a._v(" "),t("h4",{attrs:{id:"使用-pd-dataframe"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用-pd-dataframe"}},[a._v("#")]),a._v(" 使用 pd.DataFrame():")]),a._v(" "),t("p",[a._v("pd.DataFrame(student_data)        #将允许我们将 2D 列表转换为 DataFrame。")]),a._v(" "),t("p",[a._v("我们可以使用 columns 参数设置自定义列名。首先，我们按照列名在 DataFrame 上的显示顺序创建一个列名列表。然后，我们将在调用 pd.DataFrame() 函数时将列表作为参数提供。")]),a._v(" "),t("p",[a._v('column_names = ["student_id", "age"]')]),a._v(" "),t("p",[a._v("pd.DataFrame(student_data, columns=column_names)")]),a._v(" "),t("h3",{attrs:{id:"_3、代码实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3、代码实现"}},[a._v("#")]),a._v(" 3、代码实现")]),a._v(" "),t("div",{staticClass:"language-python extra-class"},[t("pre",{pre:!0,attrs:{class:"language-python"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("import")]),a._v(" pandas "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("as")]),a._v(" pd\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("def")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("createDataframe")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("student_data"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" List"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("List"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" pd"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("DataFrame"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n    column_names "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"student_id"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"age"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n    result_dataframe "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" pd"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("DataFrame"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("student_data"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" columns"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("column_names"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" result_dataframe\n")])])]),t("h3",{attrs:{id:"_4、执行结果"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4、执行结果"}},[a._v("#")]),a._v(" 4、执行结果")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/yishukan/yishukan/raw/master/img/image-20231024234148712.png",alt:"image-20231024234148712"}})]),a._v(" "),t("p",[a._v("实际结果与预期结果一致，题目验证通过。")])])}),[],!1,null,null,null);t.default=e.exports}}]);