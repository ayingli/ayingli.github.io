(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{357:function(a,t,s){"use strict";s.r(t);var e=s(6),n=Object(e.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"如何用python的pandas库函数重命名列名"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何用python的pandas库函数重命名列名"}},[a._v("#")]),a._v(" 如何用Python的pandas库函数重命名列名")]),a._v(" "),t("h2",{attrs:{id:"题目"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#题目"}},[a._v("#")]),a._v(" 题目")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("DataFrame students\n+-------------+--------+\n| Column Name | Type   |\n+-------------+--------+\n| id          | int    |\n| first       | object |\n| last        | object |\n| age         | int    |\n+-------------+--------+\n")])])]),t("p",[a._v("编写一个解决方案，按以下方式重命名列：")]),a._v(" "),t("ul",[t("li",[t("code",[a._v("id")]),a._v(" 重命名为 "),t("code",[a._v("student_id")])]),a._v(" "),t("li",[t("code",[a._v("first")]),a._v(" 重命名为 "),t("code",[a._v("first_name")])]),a._v(" "),t("li",[t("code",[a._v("last")]),a._v(" 重命名为 "),t("code",[a._v("last_name")])]),a._v(" "),t("li",[t("code",[a._v("age")]),a._v(" 重命名为 "),t("code",[a._v("age_in_years")])])]),a._v(" "),t("p",[a._v("返回结果格式如下示例所示。")]),a._v(" "),t("p",[t("strong",[a._v("示例 1:")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("输入：\n+----+---------+----------+-----+\n| id | first   | last     | age |\n+----+---------+----------+-----+\n| 1  | Mason   | King     | 6   |\n| 2  | Ava     | Wright   | 7   |\n| 3  | Taylor  | Hall     | 16  |\n| 4  | Georgia | Thompson | 18  |\n| 5  | Thomas  | Moore    | 10  |\n+----+---------+----------+-----+\n输出：\n+------------+------------+-----------+--------------+\n| student_id | first_name | last_name | age_in_years |\n+------------+------------+-----------+--------------+\n| 1          | Mason      | King      | 6            |\n| 2          | Ava        | Wright    | 7            |\n| 3          | Taylor     | Hall      | 16           |\n| 4          | Georgia    | Thompson  | 18           |\n| 5          | Thomas     | Moore     | 10           |\n+------------+------------+-----------+--------------+\n解释：\n列名已相应更换。\n")])])]),t("h2",{attrs:{id:"解题方案"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#解题方案"}},[a._v("#")]),a._v(" 解题方案")]),a._v(" "),t("h3",{attrs:{id:"_1、审题-理解题意"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、审题-理解题意"}},[a._v("#")]),a._v(" 1、审题，理解题意")]),a._v(" "),t("p",[a._v("题目意思有一个名为 students 的 DataFrame，它包含学生数据。但是，列名并不具有很强的描述性，要对列名进行更名。")]),a._v(" "),t("h3",{attrs:{id:"_2、解题思路"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、解题思路"}},[a._v("#")]),a._v(" 2、解题思路")]),a._v(" "),t("p",[a._v("这时我们可以用pandas库中的rename函数来重命名列。先来学习下rename函数：")]),a._v(" "),t("ul",[t("li",[t("code",[a._v("rename")]),a._v("函数： 在 pandas 中"),t("code",[a._v("rename")]),a._v(" 函数在涉及到重命名列名或索引名时是一个非常有用的工具。")]),a._v(" "),t("li",[t("code",[a._v("rename")]),a._v("用法: DataFrame.rename(mapper=None, index=None, columns=None, axis=None, copy=True, inplace=False, level=None, errors='raise')。"),t("code",[a._v("rename")]),a._v("方法有许多可选的参数。出于我们的目的，我们感兴趣的是 columns 参数，它允许您传递一个字典，其中键表示当前列名，值表示新列名。")])]),a._v(" "),t("h4",{attrs:{id:"参数定义"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参数定义"}},[a._v("#")]),a._v(" 参数定义:")]),a._v(" "),t("ul",[t("li",[t("p",[t("code",[a._v("mapper")]),a._v(" ，"),t("code",[a._v("index")]),a._v("， "),t("code",[a._v("columns")]),a._v("：可以传递以重命名索引或列的词典。在我们的示例中，我们使用"),t("code",[a._v("columns")]),a._v("。")])]),a._v(" "),t("li",[t("p",[t("code",[a._v("axis")]),a._v('： 可以是 "index" 或 "columns"。确定是重命名索引还是重命名列。默认情况下，如果您提供 columns 参数，您将重命名列。')])]),a._v(" "),t("li",[t("p",[t("code",[a._v("copy")]),a._v("： 如果设置为 "),t("code",[a._v("True")]),a._v("，则创建一个新的"),t("code",[a._v("DataFrame")]),a._v("。如果为 "),t("code",[a._v("False")]),a._v("，则修改原始 DataFrame。")])]),a._v(" "),t("li",[t("p",[t("code",[a._v("inplace")]),a._v("： 如果设置为"),t("code",[a._v("True")]),a._v("，则重命名会原地修改"),t("code",[a._v("DataFrame")]),a._v("，不会返回任何内容。如果为"),t("code",[a._v("False")]),a._v("，则在不修改原有"),t("code",[a._v("DataFrame")]),a._v(" 的情况下，返回一个新的带有更名列的 "),t("code",[a._v("DataFrame")]),a._v("。")])]),a._v(" "),t("li",[t("p",[t("code",[a._v("level")]),a._v("： 对于具有多级索引的 "),t("code",[a._v("DataFrame")]),a._v("，应当重命名标签的级别。")])]),a._v(" "),t("li",[t("p",[t("code",[a._v("errors")]),a._v("： 如果是"),t("code",[a._v("raise")]),a._v("，如果尝试重命名不存在的项，则会引发错误。如果设置为 "),t("code",[a._v("ignore")]),a._v("，任何重命名项目的失败都将被忽略。")]),a._v(" "),t("h5",{attrs:{id:"代码实现步骤"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#代码实现步骤"}},[a._v("#")]),a._v(" 代码实现步骤：")])]),a._v(" "),t("li",[t("p",[a._v("import pandas as pd                #首先导入 pandas 库，并给它起一个别名 pd。")])]),a._v(" "),t("li",[t("p",[a._v("def renameColumns(students: pd.DataFrame) -> pd.DataFrame:        #我们定义了一个函数 "),t("code",[a._v("renameColumns")]),a._v("，该函数接受 DataFrame "),t("code",[a._v("students")]),a._v(" 并返回修改后的 DataFrame。")])]),a._v(" "),t("li",[t("p",[a._v("在该函数中，我们对 "),t("code",[a._v("students")]),a._v(" 使用"),t("code",[a._v("rename")]),a._v(" 方法来重命名列。我们将一个词典传递给 "),t("code",[a._v("columns")]),a._v(" 参数，以指定每个列的新名称。")])])]),a._v(" "),t("p",[a._v('students = students.rename(\ncolumns={\n"id": "student_id",\n"first": "first_name",\n"last": "last_name",\n"age": "age_in_years",\n}\n)')]),a._v(" "),t("ul",[t("li",[a._v("return students     #然后返回修改后的 DataFrame。")])]),a._v(" "),t("p",[a._v("请记住，此函数不会更改原始的 DataFrame，而是返回一个新的 DataFrame，其中包含重命名的列。如果您希望修改原有的 DataFrame，可以在调用"),t("code",[a._v("rename")]),a._v(" 方法时将"),t("code",[a._v("inplace")]),a._v(" 参数设置为True。")]),a._v(" "),t("h3",{attrs:{id:"_3、代码实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3、代码实现"}},[a._v("#")]),a._v(" 3、代码实现")]),a._v(" "),t("div",{staticClass:"language-python extra-class"},[t("pre",{pre:!0,attrs:{class:"language-python"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("import")]),a._v(" pandas "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("as")]),a._v(" pd\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("def")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("renameColumns")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("students"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" pd"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("DataFrame"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" pd"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("DataFrame"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n    students "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" students"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("rename"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("\n        columns"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n            "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"id"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"student_id"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n            "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"first"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"first_name"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n            "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"last"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"last_name"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n            "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"age"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"age_in_years"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" students\n\n")])])]),t("h3",{attrs:{id:"_4、执行结果"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4、执行结果"}},[a._v("#")]),a._v(" 4、执行结果")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/yishukan/yishukan/raw/master/img/image-20231025100007599.png",alt:"image-20231025100007599"}})])])}),[],!1,null,null,null);t.default=n.exports}}]);