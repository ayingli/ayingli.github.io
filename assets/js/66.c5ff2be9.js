(window.webpackJsonp=window.webpackJsonp||[]).push([[66],{373:function(t,a,s){"use strict";s.r(a);var e=s(6),n=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"什么是变量-变量的命名规则和使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是变量-变量的命名规则和使用"}},[t._v("#")]),t._v(" 什么是变量？变量的命名规则和使用")]),t._v(" "),a("h3",{attrs:{id:"什么是变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是变量"}},[t._v("#")]),t._v(" 什么是变量")]),t._v(" "),a("h4",{attrs:{id:"首先-写一个最简单的程序-理解python都做了什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#首先-写一个最简单的程序-理解python都做了什么"}},[t._v("#")]),t._v(" 首先，写一个最简单的程序，理解python都做了什么")]),t._v(" "),a("p",[t._v("1、新建一个后缀名为 py 的文件")]),t._v(" "),a("p",[t._v("2、在文件中输入：")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello, future programmer!"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("3、运行上述代码，将看到如下输出：")]),t._v(" "),a("p",[t._v("Hello, future programmer!")]),t._v(" "),a("p",[t._v("运行文件时，末尾的py指出这是一个Python程序，因此编辑器将使用Python解释器来运行它。Python解释器读取整个程序，确定其中每个单词的含义。例如，看到单词print 时，解释器就会将括号中的内容打印到屏幕，而不会管括号中的内容是什么。")]),t._v(" "),a("h4",{attrs:{id:"然后-我们在文件中尝试使用变量-让python解释器打印出变量的值-来理解什么是变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#然后-我们在文件中尝试使用变量-让python解释器打印出变量的值-来理解什么是变量"}},[t._v("#")]),t._v(" 然后，我们在文件中尝试使用变量，让Python解释器打印出变量的值，来理解什么是变量？")]),t._v(" "),a("p",[t._v("1、在文件中输入：")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[t._v("message "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Hello, future programmer!'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("message"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("2、运行上述代码，将看到如下输出：")]),t._v(" "),a("p",[t._v("Hello, future programmer!")]),t._v(" "),a("p",[t._v("我们看到这次的输出与上次的输出一样，虽然结果都一样，但由于这次增加了变量，导致解释器需要做更多的工作。")]),t._v(" "),a("p",[t._v("解释器处理第1行代码时，将文本'Hello, future programmer!'与变量message 关联起来；处理第2行代码时，将与变量message 关联的值打印到屏幕上。")]),t._v(" "),a("p",[t._v("3、我们在文件中继续输入：")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[t._v("message "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Hello, future programmer!'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("message"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nmessage "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello,today is a fine day!"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("message"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("4、运行上述代码，将看到如下输出：")]),t._v(" "),a("p",[t._v("Hello, future programmer!\nhello,today is a fine day!")]),t._v(" "),a("p",[a("strong",[t._v("变量message的值在程序中可以随时变更，但是python只记录变量的最新值。")])]),t._v(" "),a("h3",{attrs:{id:"变量的命名"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#变量的命名"}},[t._v("#")]),t._v(" 变量的命名")]),t._v(" "),a("p",[t._v("变量的命名规则如下：")]),t._v(" "),a("ul",[a("li",[t._v("变量名只能包含字母、数字和下划线。变量名可以字母或下划线打头，但不能以数字打头，例如，可将变量命名为first_1，但不能将其命名为1_first。")]),t._v(" "),a("li",[t._v("变量名不能包含空格，但可使用下划线来分隔其中的单词。例如，变量名可以是first_name，但不能是first name，否则会引发错误。")]),t._v(" "),a("li",[t._v("不要将Python关键字和函数名用作变量名，即不要使用Python保留用于特殊用途的单词，如print 。")]),t._v(" "),a("li",[t._v("变量名应既简短又具有描述性。例如，students比s好，first_name比f_n好等。")]),t._v(" "),a("li",[t._v("慎用小写字母l和大写字母O，因为它们可能被人错看成数字1和0。")])]),t._v(" "),a("h3",{attrs:{id:"变量的使用要避免命名错误"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#变量的使用要避免命名错误"}},[t._v("#")]),t._v(" 变量的使用要避免命名错误")]),t._v(" "),a("p",[t._v("1、我们在文件中继续输入：")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[t._v("message "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"today is Monday!"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mesage"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("2、运行上述代码，将看到如下报错信息：")]),t._v(" "),a("p",[t._v('Traceback (most recent call last):\nFile "d:\\code\\GitHub\\ayingli\\docs\\python_basic\\03 变量.py", line 11, in '),a("module",[t._v("\nprint(mesage)\n^^^^^^\nNameError: name 'mesage' is not defined. Did you mean: 'message'?")])],1),t._v(" "),a("p",[t._v("当程序无法成功运行时，python解释器会提供一个traceback，竭尽所能地帮助你找出问题所在，在什么地方陷入了困境。解释器指出，第11行存在错误；它还指出了是什么样的错误，打印的变量mesage 未定义，并且提示你变量名是不是“message”？")]),t._v(" "),a("p",[t._v("问题找到之后，我们修改代码为：")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[t._v("message "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"today is Monday!"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("message"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("再次运行，将看到如下输出")]),t._v(" "),a("p",[t._v("today is Monday!")]),t._v(" "),a("p",[t._v("我们还可以修改代码为：")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[t._v("mesage "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"today is Monday!"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mesage"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("运行代码，将看到如下输出")]),t._v(" "),a("p",[t._v("today is Monday!")]),t._v(" "),a("p",[t._v("从这两个示例中，我们可以看出来Python解释器不会对代码做拼写检查，但要求变量名的拼写一致。  所以，在创建变量名和编写代码时，你无需考虑英语中的拼写和语法规则。")])])}),[],!1,null,null,null);a.default=n.exports}}]);