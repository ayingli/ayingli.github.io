(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{353:function(a,s,t){"use strict";t.r(s);var e=t(6),r=Object(e.a)({},(function(){var a=this,s=a._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"如何用python的pandas库修改列值-批量更新员工工资"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何用python的pandas库修改列值-批量更新员工工资"}},[a._v("#")]),a._v(" 如何用Python的pandas库修改列值，批量更新员工工资")]),a._v(" "),s("h2",{attrs:{id:"题目"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#题目"}},[a._v("#")]),a._v(" 题目")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("DataFrame employees\n+-------------+--------+\n| Column Name | Type   |\n+-------------+--------+\n| name        | object |\n| salary      | int    |\n+-------------+--------+\n")])])]),s("p",[a._v("一家公司决定增加员工的薪水。")]),a._v(" "),s("p",[a._v("编写一个解决方案，将每个员工的薪水乘以2来 "),s("strong",[a._v("修改")]),a._v(" "),s("code",[a._v("salary")]),a._v(" 列。")]),a._v(" "),s("p",[a._v("返回结果格式如下示例所示。")]),a._v(" "),s("p",[s("strong",[a._v("示例 1:")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("输入：\nDataFrame employees\n+---------+--------+\n| name    | salary |\n+---------+--------+\n| Jack    | 19666  |\n| Piper   | 74754  |\n| Mia     | 62509  |\n| Ulysses | 54866  |\n+---------+--------+\n输出：\n+---------+--------+\n| name    | salary |\n+---------+--------+\n| Jack    | 39332  |\n| Piper   | 149508 |\n| Mia     | 125018 |\n| Ulysses | 109732 |\n+---------+--------+\n解释：\n每个人的薪水都被加倍。\n")])])]),s("h2",{attrs:{id:"解题方案"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#解题方案"}},[a._v("#")]),a._v(" 解题方案")]),a._v(" "),s("h3",{attrs:{id:"_1、审题-理解题意"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、审题-理解题意"}},[a._v("#")]),a._v(" 1、审题，理解题意")]),a._v(" "),s("p",[a._v("题目的意思是修改 DataFrame employees 中的 salary 列，使每个员工的工资翻一番。方法是将 salary 列值乘以 2，然后将 salary 列值更新。")]),a._v(" "),s("p",[a._v("在 pandas 中，可以按列进行操作，影响列中的每个元素。按列操作： 可以对 DataFrame Series 中的每个单独元素执行的操作。按列操作的几种类型的示例包括算术操作、聚合函数、筛选和条件操作以及字符串操作。")]),a._v(" "),s("h3",{attrs:{id:"_2、解题思路"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2、解题思路"}},[a._v("#")]),a._v(" 2、解题思路")]),a._v(" "),s("p",[a._v("通过将每个值加倍来修改 employees DataFrame 的 salary 列。具体步骤为：")]),a._v(" "),s("ol",[s("li",[a._v("employees['salary']:")])]),a._v(" "),s("p",[a._v("这就是访问 pandas 中 DataFrame 的特定列的方式。employees 为DataFrame，['salary'] 表示名为 salary 的列。它将返回 pandas Series，这是一个一维标签数组。所以，employees['salary'] 将为您提供 DataFrame employees 的 salary 列中的所有值。")]),a._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[a._v("employees['salary']")])]),a._v(" "),s("p",[a._v("pandas 允许进行矢量化操作。当您将 Series 乘以标量(单个数字)时，它将 Series 中的每个元素乘以该数字。在我们的例子中，它将 salary 列中的每个值都加倍。")]),a._v(" "),s("ol",{attrs:{start:"3"}},[s("li",[a._v("employees['salary'] = ...:")])]),a._v(" "),s("p",[a._v("此行更新 DataFrame 的现有列中的值。如果因为某种原因，salary 不存在，pandas 就会创建它。在语句 employees['salary'] = employees['salary'] * 2中，我们实际上要做的是从 salary 列中取出每个工资值，将其加倍，然后用这些新计算的值更新原始的 salary 列。")]),a._v(" "),s("p",[a._v("DataFrame employees 保留其 salary 列，但此列中的值现在已更新为其原始金额的两倍。")]),a._v(" "),s("h3",{attrs:{id:"_3、代码实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3、代码实现"}},[a._v("#")]),a._v(" 3、代码实现")]),a._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("import")]),a._v(" pandas "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("as")]),a._v(" pd\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("def")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("modifySalaryColumn")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("employees"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" pd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("DataFrame"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" pd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("DataFrame"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n    employees"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'salary'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" employees"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'salary'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" employees\n")])])]),s("h3",{attrs:{id:"_4、执行结果"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4、执行结果"}},[a._v("#")]),a._v(" 4、执行结果")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/yishukan/yishukan/raw/master/img/image-20231025091641558.png",alt:"image-20231025091641558"}})])])}),[],!1,null,null,null);s.default=r.exports}}]);