(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{342:function(t,a,s){"use strict";s.r(a);var n=s(6),e=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"如何用python的pandas库修改列的数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何用python的pandas库修改列的数据类型"}},[t._v("#")]),t._v(" 如何用Python的pandas库修改列的数据类型")]),t._v(" "),a("h3",{attrs:{id:"题目"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#题目"}},[t._v("#")]),t._v(" 题目")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("DataFrame students\n+-------------+--------+\n| Column Name | Type   |\n+-------------+--------+\n| student_id  | int    |\n| name        | object |\n| age         | int    |\n| grade       | float  |\n+-------------+--------+\n")])])]),a("p",[t._v("编写一个解决方案来纠正以下错误：")]),t._v(" "),a("p",[a("code",[t._v("grade")]),t._v(" 列被存储为浮点数，将它转换为整数。")]),t._v(" "),a("p",[t._v("返回结果格式如下示例所示。")]),t._v(" "),a("p",[a("strong",[t._v("示例 1:")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("输入：\nDataFrame students:\n+------------+------+-----+-------+\n| student_id | name | age | grade |\n+------------+------+-----+-------+\n| 1          | Ava  | 6   | 73.0  |\n| 2          | Kate | 15  | 87.0  |\n+------------+------+-----+-------+\n输出：\n+------------+------+-----+-------+\n| student_id | name | age | grade |\n+------------+------+-----+-------+\n| 1          | Ava  | 6   | 73    |\n| 2          | Kate | 15  | 87    |\n+------------+------+-----+-------+\n解释：\ngrade 列的数据类型已转换为整数。\n")])])]),a("h3",{attrs:{id:"解题方案"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解题方案"}},[t._v("#")]),t._v(" 解题方案")]),t._v(" "),a("h3",{attrs:{id:"_1、审题-理解题意"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、审题-理解题意"}},[t._v("#")]),t._v(" 1、审题，理解题意")]),t._v(" "),a("p",[t._v("题目的意思是有一个名为 "),a("code",[t._v("students")]),t._v("  的 DataFrame，它包含学生数据。但是，分数存储为浮点数，而不是整数。要求是将分数类型从浮点型更改为整型。更改数据类型可以用"),a("code",[t._v("pandas")]),t._v("库中的"),a("code",[t._v("astype")]),t._v(" 函数")]),t._v(" "),a("h3",{attrs:{id:"_2、解题思路"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、解题思路"}},[t._v("#")]),t._v(" 2、解题思路")]),t._v(" "),a("p",[a("code",[t._v("astype")]),t._v(" 函数: "),a("code",[t._v("astype")]),t._v(" 函数用于将"),a("code",[t._v("pandas")]),t._v(" 对象强制转换为指定的数据类型(数据类型)。"),a("code",[t._v("astype")]),t._v(" 可用于将熊猫对象强制转换为任何 "),a("code",[t._v("dtype")]),t._v("。"),a("code",[t._v("astype")]),t._v(" 函数不会就地修改原始的 DataFrame。相反，它返回具有指定数据类型更改的新 DataFrame。如果您希望反映原始 DataFrame 中的更改，则需要将结果重新赋值给它或相应地使用 "),a("code",[t._v("copy")]),t._v(" 参数。")]),t._v(" "),a("h6",{attrs:{id:"该函数的语法为"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#该函数的语法为"}},[t._v("#")]),t._v(" 该函数的语法为：")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[t._v("DataFrame"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("astype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dtype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" copy"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" errors"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'raise'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("ul",[a("li",[a("p",[a("code",[t._v("dtype")]),t._v("： 它是一种数据类型，或列名->数据类型的字典。")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("copy")]),t._v("： 默认情况下，"),a("code",[t._v("astype")]),t._v(" 总是返回新分配的对象。如果 "),a("code",[t._v("copy")]),t._v(" 设置为 False，则只有在旧对象无法强制转换为所需类型的情况下才会创建新对象。")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("errors")]),t._v("： 控制对提供的数据类型的无效数据引发异常。默认设置为"),a("code",[t._v("raise")]),t._v("，表示会引发异常。")]),t._v(" "),a("p",[t._v("因此，在我们的例子中，我们希望将 "),a("code",[t._v("grade")]),t._v(" 列从浮点数转换为整数，我们可以使用下面的代码行来完成此操作：")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[t._v("students "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" students"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("astype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'grade'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#此行将 grade 列从浮点型转换为整型。")]),t._v("\n")])])])])]),t._v(" "),a("h6",{attrs:{id:"代码实现步骤为"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代码实现步骤为"}},[t._v("#")]),t._v(" 代码实现步骤为：")]),t._v(" "),a("ul",[a("li",[t._v("定义 changeDatatype 的函数，该函数接受 DataFrame students 作为参数并返回 DataFrame。")])]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("changeDatatype")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("students"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" pd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("DataFrame"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" pd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("DataFrame"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n")])])]),a("ul",[a("li",[a("p",[t._v("改变列的数据类型：")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[t._v("students "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" students"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("astype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'grade'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#这行代码是解决方案的核心。使用 astype 函数将 grade 列的数据类型更改为整型。{'grade': int} 是一个字典，其中键是列名，值是所需的数据类型。")]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[t._v("返回语句：")])])]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" students       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#此行返回修改后的 DataFrame。")]),t._v("\n")])])]),a("h3",{attrs:{id:"_3、代码实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、代码实现"}},[t._v("#")]),t._v(" 3、代码实现")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" pandas "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" pd\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("changeDatatype")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("students"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" pd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("DataFrame"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" pd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("DataFrame"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    students "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" students"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("astype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'grade'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" students\n")])])]),a("h3",{attrs:{id:"_4、执行结果"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4、执行结果"}},[t._v("#")]),t._v(" 4、执行结果")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/yishukan/yishukan/raw/master/img/image-20231025102405781.png",alt:"image-20231025102405781"}})]),t._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/yishukan/yishukan/raw/master/img/image-20231025102502781.png",alt:"image-20231025102502781"}})])])}),[],!1,null,null,null);a.default=e.exports}}]);