(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{347:function(a,t,s){"use strict";s.r(t);var e=s(6),r=Object(e.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"如何用python的pandas库根据指定列删除重复的行"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何用python的pandas库根据指定列删除重复的行"}},[a._v("#")]),a._v(" 如何用Python的pandas库根据指定列删除重复的行")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("DataFrame customers\n+-------------+--------+\n| Column Name | Type   |\n+-------------+--------+\n| customer_id | int    |\n| name        | object |\n| email       | object |\n+-------------+--------+\n")])])]),t("p",[a._v("在 DataFrame 中基于 "),t("code",[a._v("email")]),a._v(" 列存在一些重复行。")]),a._v(" "),t("p",[a._v("编写一个解决方案，删除这些重复行，仅保留第一次出现的行。")]),a._v(" "),t("p",[a._v("返回结果格式如下例所示。")]),a._v(" "),t("p",[t("strong",[a._v("示例 1:")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("输入：\n+-------------+---------+---------------------+\n| customer_id | name    | email               |\n+-------------+---------+---------------------+\n| 1           | Ella    | emily@example.com   |\n| 2           | David   | michael@example.com |\n| 3           | Zachary | sarah@example.com   |\n| 4           | Alice   | john@example.com    |\n| 5           | Finn    | john@example.com    |\n| 6           | Violet  | alice@example.com   |\n+-------------+---------+---------------------+\n输出：\n+-------------+---------+---------------------+\n| customer_id | name    | email               |\n+-------------+---------+---------------------+\n| 1           | Ella    | emily@example.com   |\n| 2           | David   | michael@example.com |\n| 3           | Zachary | sarah@example.com   |\n| 4           | Alice   | john@example.com    |\n| 6           | Violet  | alice@example.com   |\n+-------------+---------+---------------------+\n解释：\nAlice (customer_id = 4) 和 Finn (customer_id = 5) 都使用 john@example.com，因此只保留该邮箱地址的第一次出现。\n")])])]),t("h2",{attrs:{id:"解题方案"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#解题方案"}},[a._v("#")]),a._v(" 解题方案")]),a._v(" "),t("h3",{attrs:{id:"_1、审题-理解题意"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、审题-理解题意"}},[a._v("#")]),a._v(" 1、审题，理解题意")]),a._v(" "),t("p",[a._v("题目中有一个名为 customers 的 DataFrame，它由 customer_id、name 和 email 等列组成。目标是根据 email 列删除重复的行，并只保留所有重复电子邮件的第一个出现。")]),a._v(" "),t("p",[a._v("要删除重复行， 可以用pandas 库操作DataFrame 对象的 drop_duplicates 函数，可以指定被视为重复的行所基于的条件。")]),a._v(" "),t("h4",{attrs:{id:"drop-duplicates-函数参数定义"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#drop-duplicates-函数参数定义"}},[a._v("#")]),a._v(" drop_duplicates 函数参数定义：")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("subset：此参数标识重复行时要考虑的列标签或标签序列。如果未提供，它将处理 DataFrame 中的所有列。")])]),a._v(" "),t("li",[t("p",[a._v("keep：此参数确定要保留的重复行。")])]),a._v(" "),t("li",[t("p",[a._v("'first'： (默认) 删除除第一个匹配项以外的重复项。")])]),a._v(" "),t("li",[t("p",[a._v("'last'： 删除除最后一个匹配项之外的重复项。")])]),a._v(" "),t("li",[t("p",[a._v("False： 删除所有重复项。")])]),a._v(" "),t("li",[t("p",[a._v("inplace： 如果设置为 True，则直接对对象进行更改，而不返回新的对象。如果设置为 False(默认)，则返回丢弃重复的新对象。")])])]),a._v(" "),t("h3",{attrs:{id:"_2、解题思路"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、解题思路"}},[a._v("#")]),a._v(" 2、解题思路")]),a._v(" "),t("p",[a._v("对于题目，我们可以用如下步骤解决：")]),a._v(" "),t("ol",[t("li",[a._v("导入 pandas:")])]),a._v(" "),t("p",[a._v("import pandas as pd")]),a._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[a._v("定义函数：")])]),a._v(" "),t("p",[a._v("def dropDuplicateEmails(customers: pd.DataFrame) -> pd.DataFrame:   #该行定义了一个名为 dropDuplicateEmails 的新函数，该函数接受 DataFrame customers 作为输入参数并返回 DataFrame。")]),a._v(" "),t("ol",{attrs:{start:"3"}},[t("li",[a._v("基于电子邮件删除重复行：")])]),a._v(" "),t("p",[a._v("customers.drop_duplicates(subset='email', keep='first', inplace=True)    #该列在 customers DataFrame 上使用 drop_duplicates 方法。")]),a._v(" "),t("p",[a._v("subset='email'： 这意味着我们只考虑基于 email 列的重复项。\nkeep='first'： 这表明我们希望保留任何重复电子邮件的第一个匹配项，并删除后续的匹配项。\ninplace=True： 这意味着更改将直接对传入的 DataFrame(customers)进行，而不会返回新的 DataFrame。")]),a._v(" "),t("ol",{attrs:{start:"4"}},[t("li",[a._v("返回修改后的 DataFrame：")])]),a._v(" "),t("p",[a._v("return customers     #最后，我们返回修改后的 customers DataFrame，去掉了基于电子邮件的重复行。")]),a._v(" "),t("h3",{attrs:{id:"_3、代码实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3、代码实现"}},[a._v("#")]),a._v(" 3、代码实现")]),a._v(" "),t("div",{staticClass:"language-python extra-class"},[t("pre",{pre:!0,attrs:{class:"language-python"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("import")]),a._v(" pandas "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("as")]),a._v(" pd\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("def")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("dropDuplicateEmails")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("customers"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" pd"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("DataFrame"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" pd"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("DataFrame"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n    customers"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("drop_duplicates"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("subset"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'email'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" keep"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'first'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" inplace"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("True")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" customers\n")])])]),t("h3",{attrs:{id:"_4、执行结果"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4、执行结果"}},[a._v("#")]),a._v(" 4、执行结果")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/yishukan/yishukan/raw/master/img/image-20231025081939293.png",alt:"image-20231025081939293"}})])])}),[],!1,null,null,null);t.default=r.exports}}]);